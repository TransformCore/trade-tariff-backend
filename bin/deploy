#!/usr/bin/env bash

set -e

export GIT_OLD_REVISION=$(cf ssh $CF_APP -c 'cat app/REVISION')
export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
export GIT_MESSAGE=$(git log --oneline $GIT_OLD_REVISION..$GIT_NEW_REVISION)

export CF_BUILDPACK="https://github.com/cloudfoundry/ruby-buildpack.git#v1.8.24"

echo $GIT_NEW_REVISION >REVISION

function notify() {
  curl -X POST \
    --data-urlencode 'payload={"text": "'"$1"'", "channel": "'"#$SLACK_CHANNEL"'", "username": "cf-deploy", "icon_emoji": ":rocket:", "fields": [{"title": "ENV", "value": "'"$CF_SPACE"'", "short": true}, {"title": "SHA1", "value": "'"<https://github.com/bitzesty/trade-tariff-backend/compare/$GIT_OLD_REVISION...$GIT_NEW_REVISION|$GIT_NEW_REVISION>"'", "short": true}]}' \
    $SLACK_WEBHOOK
}

# Check CF connectivity
cf login -a $CF_ENDPOINT -u $CF_USER -p "$CF_PASSWORD" -o $CF_ORG -s $CF_SPACE
cf apps

# Notify Slack deployment started
notify "Deploying $CF_APP.\n${GIT_MESSAGE}"

# Deploy Worker & Migrate DB
cf create-app-manifest $CF_APP_WORKER
cf push $CF_APP_WORKER -f "$CF_APP_WORKER"_manifest.yml -b $CF_BUILDPACK
cf run-task $CF_APP_WORKER "rake db:migrate" --name "db-migrate"
cf run-task $CF_APP_WORKER "rake db:data:migrate" --name "db-data-migrate"

# Deploy "old"
cf create-app-manifest $CF_APP

# "patch" the manifest so it has "buildpack", not "buildpacks":
CF_BUILDPACK=$CF_BUILDPACK ruby -ryaml -e 'm = YAML.load(STDIN); m["applications"].map{ |x| x["buildpack"] = ENV["CF_BUILDPACK"]; x.delete("buildpacks") }; puts YAML.dump(m)' \
  <"$CF_APP"_manifest.yml \
  >"$CF_APP"_patched_manifest.yml

cf blue-green-deploy $CF_APP -f "$CF_APP"_patched_manifest.yml --delete-old-apps

# Attach autoscaling policy
cf attach-autoscaling-policy $CF_APP config/autoscaling/"$CF_SPACE"-policy.json

# Deploy Worker & Migrate DB
cf create-app-manifest $CF_APP_WORKER_XI
cf push $CF_APP_WORKER_XI -f "$CF_APP_WORKER_XI"_manifest.yml -b $CF_BUILDPACK
cf run-task $CF_APP_WORKER_XI "rake db:migrate" --name "db-migrate"
cf run-task $CF_APP_WORKER_XI "rake db:data:migrate" --name "db-data-migrate"

# Deploy "XI"
cf create-app-manifest $CF_APP_XI

# "patch" the manifest so it has "buildpack", not "buildpacks":
CF_BUILDPACK=$CF_BUILDPACK ruby -ryaml -e 'm = YAML.load(STDIN); m["applications"].map{ |x| x["buildpack"] = ENV["CF_BUILDPACK"]; x.delete("buildpacks") }; puts YAML.dump(m)' \
  <"$CF_APP_XI"_manifest.yml \
  >"$CF_APP_XI"_patched_manifest.yml

cf blue-green-deploy $CF_APP_XI -f "$CF_APP_XI"_patched_manifest.yml --delete-old-apps

# Attach autoscaling policy
cf attach-autoscaling-policy $CF_APP_XI config/autoscaling/"$CF_SPACE"-policy.json

# Deploy Worker & Migrate DB
cf create-app-manifest $CF_APP_WORKER_UK
cf push $CF_APP_WORKER_UK -f "$CF_APP_WORKER_UK"_manifest.yml -b $CF_BUILDPACK
cf run-task $CF_APP_WORKER_UK "rake db:migrate" --name "db-migrate"
cf run-task $CF_APP_WORKER_UK "rake db:data:migrate" --name "db-data-migrate"

# Deploy "UK"
cf create-app-manifest $CF_APP_UK

# "patch" the manifest so it has "buildpack", not "buildpacks":
CF_BUILDPACK=$CF_BUILDPACK ruby -ryaml -e 'm = YAML.load(STDIN); m["applications"].map{ |x| x["buildpack"] = ENV["CF_BUILDPACK"]; x.delete("buildpacks") }; puts YAML.dump(m)' \
  <"$CF_APP_UK"_manifest.yml \
  >"$CF_APP_UK"_patched_manifest.yml

cf blue-green-deploy $CF_APP_UK -f "$CF_APP_UK"_patched_manifest.yml --delete-old-apps

# Attach autoscaling policy
cf attach-autoscaling-policy $CF_APP_UK config/autoscaling/"$CF_SPACE"-policy.json

# Create network policy for fronted app
# https://docs.cloud.service.gov.uk/deploying_apps.html#deploying-private-apps
# $PRIVATE_APP - backend app
# $PUBLIC_APP - frontend app
export PUBLIC_APP1=$(CF_APP=$CF_APP ruby -e 'puts ENV["CF_APP"].sub("backend", "frontend")')
export PUBLIC_APP2=$(CF_APP=$CF_APP ruby -e 'puts ENV["CF_APP"].sub("backend", "admin")')

cf add-network-policy $PUBLIC_APP1 --destination-app $CF_APP    --protocol tcp --port 8080
cf add-network-policy $PUBLIC_APP2 --destination-app $CF_APP    --protocol tcp --port 8080
cf add-network-policy $PUBLIC_APP1 --destination-app $CF_APP_XI --protocol tcp --port 8080
cf add-network-policy $PUBLIC_APP2 --destination-app $CF_APP_XI --protocol tcp --port 8080
cf add-network-policy $PUBLIC_APP1 --destination-app $CF_APP_UK --protocol tcp --port 8080
cf add-network-policy $PUBLIC_APP2 --destination-app $CF_APP_UK --protocol tcp --port 8080

# Notify Slack deployment finished
notify "Deployment finished for $CF_APP"
