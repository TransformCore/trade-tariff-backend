#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber
set -x

cf login -a "$CF_ENDPOINT" -u "$CF_USER" -p "$CF_PASSWORD" -o "$CF_ORG" -s "$CF_SPACE"
export GIT_OLD_REVISION=$(cf ssh $CF_APP_API -c 'cat app/REVISION')
export GIT_NEW_REVISION=$(git rev-parse --short HEAD)

export CF_BUILDPACK="https://github.com/cloudfoundry/ruby-buildpack.git#v1.8.24"

echo "$GIT_NEW_REVISION" >REVISION

# Replace the buildpack of the current api with the build pack specified above
cat <<HERE >update_buildpack_key.rb
require 'yaml'

app_manifest = YAML.load(STDIN)

app_manifest["applications"].map do |application|
  application["buildpack"] = "$CF_BUILDPACK"
  application.delete("buildpacks")
end

puts YAML.dump(app_manifest)
HERE

function notify() {
  curl -X POST \
    --data-urlencode 'payload={"text": "'"$1"'", "channel": "'"#$SLACK_CHANNEL"'", "username": "cf-deploy", "icon_emoji": ":rocket:", "fields": [{"title": "ENV", "value": "'"$CF_SPACE"'", "short": true}, {"title": "SHA1", "value": "'"<https://github.com/bitzesty/trade-tariff-backend/compare/$GIT_OLD_REVISION...$GIT_NEW_REVISION|$GIT_NEW_REVISION>"'", "short": true}]}' \
    "$SLACK_WEBHOOK"
}

function deploy_worker() {
  local APP_WORKER=$1

  # Fetch existing manifest
  cf create-app-manifest "$APP_WORKER"
  # Stage manifest
  cf push "$APP_WORKER" -f "$APP_WORKER"_manifest.yml -b "$CF_BUILDPACK"

  cf run-task "$APP_WORKER" "rake db:migrate" --name "db-migrate"
  cf run-task "$APP_WORKER" "rake db:data:migrate" --name "db-data-migrate"
}

function deploy_api() {
  local APP_API=$1

  # Fetch existing manifest
  echo $APP_API
  cf create-app-manifest "$APP_API"
  # Patch downloaded manifest with specified buildpack
  echo "Applying replace"
  ruby update_buildpack_key.rb <"$APP_API"_manifest.yml >"$APP_API"_patched_manifest.yml

  echo "Catting patched file"
  cat "$APP_API"_patched_manifest.yml
  # Deploy patched manifest
  # cf blue-green-deploy "$APP_API" -f "$APP_API"_patched_manifest.yml --delete-old-apps
  # # Attached precreated autoscaling policy
  # cf attach-autoscaling-policy "$APP_API" config/autoscaling/"$CF_SPACE"-policy.json
  # # Enable routing from the public applications to the backend application
  # cf add-network-policy "$CF_APP_FRONTEND" --destination-app "$APP_API" --protocol tcp --port 8080
  # cf add-network-policy "$CF_APP_ADMIN" --destination-app "$APP_API" --protocol tcp --port 8080

}

# notify "Deploying tariff backend services.\n${GIT_NEW_REVISION}"
# deploy_worker "$CF_APP_WORKER"
# deploy_worker "$CF_APP_WORKER_XI"
# deploy_worker "$CF_APP_WORKER_UK"
deploy_api "$CF_APP_API"
# deploy_api "$CF_APP_API_XI"
# deploy_api "$CF_APP_API_UK"
# notify "Deployment finished for $CF_APP_API"
